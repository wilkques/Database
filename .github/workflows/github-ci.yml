name: TESTS

on:
  push:
    branches: ["master"]

permissions:
  contents: read

env:
  MYSQL_ROOT_PASSWORD: root
  MYSQL_USER: user
  MYSQL_PASSWORD: root
  MYSQL_PORT: 3360
  MYSQL_ROOT: root
  DB_HOST: "127.0.0.1"

jobs:
  build:
    runs-on: ${{ matrix.operating-system }}

    strategy:
      matrix:
        operating-system: [ubuntu-latest]
        php-versions: ["5.4"]
        # php-versions: ['5.4', '5.6', '7.3', '7.4', '8.0', '8.1', '8.2', '8.3']

    steps:
      - name: PHP ${{ matrix.php-versions }} Test on ${{ matrix.operating-system }}
        uses: actions/checkout@v3

      - name: List files in workspace
        run: ls -R ${{ github.workspace }}

      - name: Set up MySQL container
        run: |
          docker run -d \
            --name mysql \
            -e MYSQL_ROOT_PASSWORD=${{ env.MYSQL_ROOT_PASSWORD }} \
            -p 3306:3306 \
            -v ${{ github.workspace }}/tests/Drivers/MySql/my.cnf:/etc/mysql/my.cnf \
            -v ${{ github.workspace }}/tests/Drivers/MySql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d \
            mysql:5.7
          
      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to start..."
          for i in {1..30}; do
            if docker exec mysql mysqladmin ping --silent; then
              echo "MySQL is up!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 10
          done

      - name: Create DB And User
        run: |
          docker exec mysql mysql -u ${{ env.MYSQL_ROOT }} -p${{ env.MYSQL_ROOT_PASSWORD }} < /docker-entrypoint-initdb.d/createdb.sql

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: intl #optional
          ini-values: "post_max_size=256M" #optional

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-versions }}

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
      # Docs: https://getcomposer.org/doc/articles/scripts.md

      - name: set env
        run: cp tests/.env.example tests/.env

      - name: Run test
        run: vendor/bin/phpunit
